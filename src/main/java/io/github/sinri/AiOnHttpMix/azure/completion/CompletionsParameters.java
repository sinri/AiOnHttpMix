package io.github.sinri.AiOnHttpMix.azure.completion;

import io.vertx.core.json.JsonObject;

public class CompletionsParameters {
    public final JsonObject jsonObject = new JsonObject();

    public CompletionsParameters() {

    }

    /**
     * The prompt(s) to generate completions for, encoded as a string, or array of strings.
     * Note that <\|endoftext\|> is the document separator that the model sees during training,
     * so if a prompt isn't specified the model will generate as if from the beginning of a new document.
     */
    public CompletionsParameters setPrompt(String prompt) {
        this.jsonObject.put("prompt", prompt);
        return this;
    }

    /**
     * The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens can't exceed the model's context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096).
     * default 16.
     */
    public CompletionsParameters setMaxTokens(int max_tokens) {
        this.jsonObject.put("max_tokens", max_tokens);
        return this;
    }

    /**
     * What sampling temperature to use, between 0 and 2. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer. We generally recommend altering this or top_p but not both.
     * default 1.
     */
    public CompletionsParameters setTemperature(double temperature) {
        this.jsonObject.put("temperature", temperature);
        return this;
    }

    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.
     */
    public CompletionsParameters setTopP(int top_p) {
        this.jsonObject.put("top_p", top_p);
        return this;
    }

    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     * Accepts a json object that
     * maps tokens (specified by their token ID in the GPT tokenizer)
     * to an associated bias value from -100 to 100.
     * You can use this tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to token IDs.
     * Mathematically, the bias is added to the logits generated by the model prior to sampling.
     * The exact effect will vary per model,
     * but values between -1 and 1 should decrease or increase likelihood of selection;
     * values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     * As an example, you can pass {"50256": -100} to prevent the <|endoftext|> token from being generated.
     */
    public CompletionsParameters setLogitBias(JsonObject logit_bias) {
        this.jsonObject.put("logit_bias", logit_bias);
        return this;
    }

    /**
     * A unique identifier representing your end-user, which can help monitoring and detecting abuse
     */
    public CompletionsParameters setUser(String user) {
        this.jsonObject.put("user", user);
        return this;
    }

    /**
     * How many completions to generate for each prompt.
     * Note: Because this parameter generates many completions,
     * it can quickly consume your token quota.
     * Use carefully and ensure that you have reasonable settings for max_tokens and stop.
     */
    public CompletionsParameters setUser(int n) {
        this.jsonObject.put("n", n);
        return this;
    }

    /**
     * Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 10, the API will return a list of the 10 most likely tokens. the API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response. This parameter cannot be used with gpt-35-turbo.
     */
    public CompletionsParameters setLogProbs(int logProbs) {
        this.jsonObject.put("logprobs", logProbs);
        return this;
    }

    /**
     * The suffix that comes after a completion of inserted text.
     */
    public CompletionsParameters setSuffix(String suffix) {
        this.jsonObject.put("suffix", suffix);
        return this;
    }

    /**
     * Up to four sequences where the API will stop generating further tokens.
     * The returned text won't contain the stop sequence.
     */
    public CompletionsParameters setStop(String stop) {
        this.jsonObject.put("stop", stop);
        return this;
    }

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     */
    public CompletionsParameters setPresencePenalty(double presence_penalty) {
        this.jsonObject.put("presence_penalty", presence_penalty);
        return this;
    }

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     */
    public CompletionsParameters setFrequencyPenalty(double frequency_penalty) {
        this.jsonObject.put("frequency_penalty", frequency_penalty);
        return this;
    }

    public JsonObject toJsonObject() {
        return this.jsonObject;
    }
}
