package io.github.sinri.AiOnHttpMix.azure.chat;

import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.List;

public class ChatCompletionsParameters {
    public final JsonObject jsonObject;

    public ChatCompletionsParameters() {
        jsonObject = new JsonObject();
    }

    public ChatCompletionsParameters(JsonObject another) {
        //jsonObject = another;
        this();
        List<String> keys = new ArrayList<>();
        keys.add("messages");
        keys.add("temperature");
        keys.add("n");
        keys.add("stop");
        keys.add("max_tokens");
        keys.add("presence_penalty");
        keys.add("frequency_penalty");
        keys.add("logit_bias");
        keys.add("user");
        keys.add("tools");

        keys.forEach(key -> {
            if (another.containsKey(key)) {
                jsonObject.put(key, another.getValue(key));
            }
        });
    }

    /**
     * The collection of context messages associated with this chat completions request. Typical usage begins with a chat message for the System role that provides instructions for the behavior of the assistant, followed by alternating messages between the User and Assistant roles.
     */
    public ChatCompletionsParameters setMessages(List<ChatMessage> messageList) {
        JsonArray messages = new JsonArray();

        messageList.forEach(message -> {
            messages.add(message.toJsonObject());
        });
        this.jsonObject.put("messages", messages);
        return this;
    }

    public ChatCompletionsParameters appendMessage(ChatMessage message) {
        if (this.jsonObject.getJsonArray("messages") == null) {
            this.jsonObject.put("messages", new JsonArray());
        }
        this.jsonObject.getJsonArray("messages").add(message.toJsonObject());
        return this;
    }

    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or top_p but not both.
     * Optional.
     *
     * @param temperature default 1
     */
    public ChatCompletionsParameters setTemperature(double temperature) {
        this.jsonObject.put("temperature", temperature);
        return this;
    }

    /**
     * How many chat completion choices to generate for each input message.
     *
     * @param n default 1
     */
    public ChatCompletionsParameters setN(int n) {
        this.jsonObject.put("n", n);
        return this;
    }

    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message."
     *
     * @param stream default false
     */
    public ChatCompletionsParameters setStream(boolean stream) {
        this.jsonObject.put("stream", stream);
        return this;
    }

    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     */
    public ChatCompletionsParameters setStop(String stop) {
        this.jsonObject.put("stop", stop);
        return this;
    }

    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     */
    public ChatCompletionsParameters setStop(List<String> stop) {
        JsonArray stop_array = new JsonArray(stop);
        this.jsonObject.put("stop", stop_array);
        return this;
    }

    /**
     * The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).
     */
    public ChatCompletionsParameters setMaxToken(int maxToken) {
        this.jsonObject.put("max_token", maxToken);
        return this;
    }

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     */
    public ChatCompletionsParameters setPresencePenalty(double presencePenalty) {
        this.jsonObject.put("presence_penalty", presencePenalty);
        return this;
    }

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     */
    public ChatCompletionsParameters setFrequencyPenalty(double frequencyPenalty) {
        this.jsonObject.put("frequency_penalty", frequencyPenalty);
        return this;
    }

    /**
     * Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     */
    public ChatCompletionsParameters setLogitBias(JsonObject logitBias) {
        this.jsonObject.put("logit_bias", logitBias);
        return this;
    }

    /**
     * A unique identifier representing your end-user, which can help Azure OpenAI to monitor and detect abuse.
     */
    public ChatCompletionsParameters setUser(String user) {
        this.jsonObject.put("user", user);
        return this;
    }

    public ChatCompletionsParameters setTools(@NotNull List<ToolDefinition> toolDefinitionList) {
        JsonArray array = new JsonArray();
        toolDefinitionList.forEach(x -> {
            array.add(x.toJsonObject());
        });
        this.jsonObject.put("tools", array);
        return this;
    }

    // function_call and functions are not supported here

    public JsonObject toJsonObject() {
        return this.jsonObject;
    }


}
