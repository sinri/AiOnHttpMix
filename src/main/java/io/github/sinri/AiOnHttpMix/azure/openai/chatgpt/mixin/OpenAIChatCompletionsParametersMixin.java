package io.github.sinri.AiOnHttpMix.azure.openai.chatgpt.mixin;

import io.github.sinri.AiOnHttpMix.azure.openai.chatgpt.ChatGPTKit;
import io.github.sinri.AiOnHttpMix.azure.openai.chatgpt.impl.request.ChatCompletionToolChoiceOptionImpl;
import io.github.sinri.AiOnHttpMix.azure.openai.chatgpt.impl.request.ToolDefinitionImpl;
import io.github.sinri.AiOnHttpMix.utils.FunctionToolDefinition;
import io.github.sinri.keel.core.SelfInterface;
import io.github.sinri.keel.core.json.JsonifiableEntity;
import io.vertx.core.Handler;
import org.jetbrains.annotations.Nullable;

public interface OpenAIChatCompletionsParametersMixin<E> extends JsonifiableEntity<E>, SelfInterface<E> {
    /**
     * What sampling temperature to use, between 0 and 2.
     * Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * We generally recommend altering this or top_p but not both.
     *
     * @param temperature Amongst (0,2), default 1.
     */
    E setTemperature(double temperature);

    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
     * So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     * We generally recommend altering this or temperature but not both.
     *
     * @param topP default 1.
     */
    E setTopP(double topP);

    /**
     * If set, partial message deltas will be sent, like in ChatGPT.
     * Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.
     */
    E useStream();

    // stop | string or array	| Up to 4 sequences where the API will stop generating further tokens.

    /**
     * The maximum number of tokens allowed for the generated answer.
     * By default, the number of tokens the model can return will be (4096 - prompt tokens).
     *
     * @param maxTokens default 4096.
     */
    E setMaxTokens(int maxTokens);

    /**
     * Number between -2.0 and 2.0.
     * Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     *
     * @param presencePenalty Amongst (-2.0,2.0), default 0.
     */
    E setPresencePenalty(double presencePenalty);

    /**
     * Number between -2.0 and 2.0.
     * Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     *
     * @param frequencyPenalty Amongst (-2.0,2.0), default 0.
     */
    E setFrequencyPenalty(double frequencyPenalty);

    // logit_bias	|object	|Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.	No

    // user	|string	|A unique identifier representing your end-user, which can help Azure OpenAI to monitor and detect abuse.	No

    /**
     * To generate a list of messages comprising the conversation so far.
     *
     * @see <a href="https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb">Example Python code</a>
     */
    E addMessage(ChatGPTKit.Message message);

    default E addMessage(Handler<OpenAIMessageMixin.Builder> handler) {
        OpenAIMessageMixin.Builder builder = ChatGPTKit.Message.builder();
        handler.handle(builder);
        return addMessage(builder.build());
    }

    // data_sources	|array	|The configuration entries for Azure OpenAI chat extensions that use them.
    // This additional specification is only compatible with Azure OpenAI.

    /**
     * How many chat completion choices to generate for each input message.
     *
     * @param n default 1.
     */
    E setN(int n);

    /**
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
     * Determinism isn't guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
     *
     * @param seed default 0.
     */
    E setSeed(int seed);

    // logprobs	|boolean	|Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message. This option is currently not available on the gpt-4-vision-preview model.
    // top_logprobs	|integer	|An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.	No

    /**
     * An object specifying the format that the model must output.
     * Used to enable JSON mode.
     */
    E setResponseFormat(ChatCompletionResponseFormat responseFormat);

    /**
     * To generate a list of tools the model may call.
     * Currently, only functions are supported as a tool.
     * Use this to provide a list of functions the model may generate JSON inputs for.
     */
    E addTool(ChatGPTKit.ToolDefinition toolDefinition);

//    default E addTool(Handler<OpenAIToolDefinitionMixin.FunctionToolDefinitionBuilder> handler) {
//        OpenAIToolDefinitionMixin.FunctionToolDefinitionBuilder builder = ChatGPTKit.ToolDefinition.builder();
//        handler.handle(builder);
//        return addTool(builder.build());
//    }

    default E addTool(Handler<FunctionToolDefinition.FunctionToolDefinitionBuilder<ToolDefinitionImpl.Builder, ToolDefinitionImpl>> handler) {
        var builder = new ToolDefinitionImpl.Builder();
        handler.handle(builder);
        return addTool(builder.build());
    }

    /**
     * Controls which (if any) function is called by the model.
     * `none` means the model will not call a function and instead generates a message.
     * `auto` means the model can pick between generating a message or calling a function.
     * Specifying a particular function via @code{{"type": "function", "function": {"name": "my_function"}}} forces the model to call that function.
     */
    E setToolChoice(ChatCompletionToolChoiceOption toolChoiceOption);

    // functions	|array	|Deprecated in favor of tools. A list of functions the model may generate JSON inputs for.	No
    // function_call	|string or object	|Deprecated in favor of tool_choice. Controls how the model responds to function calls. "none" means the model doesn't call a function, and responds to the end-user. "auto" means the model can pick between an end-user or calling a function. Specifying a particular function via {"name":\ "my_function"} forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present.	No

    interface ChatCompletionToolChoiceOption {
        static ChatCompletionToolChoiceOption asNone() {
            return new ChatCompletionToolChoiceOptionImpl(Type.none);
        }

        static ChatCompletionToolChoiceOption asAuto() {
            return new ChatCompletionToolChoiceOptionImpl(Type.auto);
        }

        static ChatCompletionToolChoiceOption asFunction(String functionName) {
            return new ChatCompletionToolChoiceOptionImpl(functionName);
        }

        Type getType();

        @Nullable String getFunctionName();

        /**
         * This enum is not defined by OpenAI but Sinri.
         */
        enum Type {
            none, auto, function
        }
    }

    enum ChatCompletionResponseFormat {
        /**
         * Response format is a plain text string.
         */
        text,
        /**
         * Response format is a JSON object.
         */
        json_object,
    }
}